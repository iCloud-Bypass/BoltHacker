m15321d(BluetoothGattCharacteristic bluetoothGattCharacteristic) //writing function
  write the Characterstic
  
m15316b(C2591z c2591z)
  m15321d(c2591z.m15494b()); //call the writing function
  
m15314a(C2591z c2591z)
  just call m15316b() with the BLE Char

m15328b(BluetoothGattCharacteristic bluetoothGattCharacteristic)
  create the c2591z with writing instructions
  call m15314a()
  
now for the important/difficult part
  
run()
  Key keyForUser = this.lock.getKeyForUser(ab.m15573e());   //get user key, very complicated
  if (keyForUser != null) {
    this.aaVar.m15309a(keyForUser.getAccessKey(), this.lockState);  //generates random/encrypted data array to be written
    this.bluetoothGattCharacteristic.setValue(this.aaVar.m15311a());  //builds packet with m15311a(), and then sets BLE char value with it
    this.c2540a.f8785n.m15328b(this.bluetoothGattCharacteristic);   //call m15328b() which is the function above, I think f8785n is the GATT descriptor
    return;
  }
  this.c2540a.m15305d();  //else disconnect


byte[] m15300a(Lock lock, LockState lockState, byte[] bArr) 
  if (this.f8785n == null || this.f8771G == null || this.f8771G.m15483c() == null) {
    return null;
  BluetoothGattCharacteristic c = this.f8771G.m15483c();  //c = BLE char at handle 0x19 
  aa aaVar = new aa(0x1c, bArr);  //initializes empty array and sets it as a write message with header byte 0x1c
  this.f8778g = true;
  new Thread(new C2545f(this, lock, aaVar, lockState, c)).run();  //call the run function which is above
  return aaVar.m15312b();
    
    
byte[] m15302a(LockState lockState, String str) 
  return m15300a(this.f8786o, lockState, C2649i.m15635a(str));  //call m15300a() which is the function above, doesn't do anything else
  

byte[] m15301a(LockState lockState) 
  return m15302a(lockState, null);  //call m15302a() which is the function above, doesn't really do anything else
    

mo2195a(Lock lock) {
  upon connection with lockitron
  this.f8887m = this.f8876b.m15301a(LockState.UNLOCK);  //call m15301a
  
  
*********************************************************************************************************************************

Helper Functions

byte[] m15311a(){  //called by run, sets up ble char array value
  byte b = 0x00;
  if (this.f8806i) {
     byte[] bArr = new byte[16];
     bArr[0] = 0x1c;    //always the same for locks and unlocks
     bArr[1] = this.f8800c; //(byte) new Random().nextInt(256);
     bArr[2] = this.f8801d; //(byte) new Random().nextInt(256);
     bArr[3] = 0x10;    //akways the same for locks and unlocks
     while (b < 16) {   //loop for the payload
        bArr[b + 4] = this.f8805h[b];
        b++;
     }
     bArr[20] = this.f8803f;  //I think this is also randomly generated
     bArr[21] = this.f8804g;  //I think this is also randomly generated
     return bArr;
  }
}


m15309a(String str, LockState lockState){
  int i = 0;
  byte[] bArr = new byte[16];
  for (int i2 = 0; i2 < 14; i2++) {
    bArr[i2] = (byte) new Random().nextInt(255);  //randomly get 14 different values, how does this function work?
  }
  if (lockState.equals(LockState.LOCK)) {
    i = 1;
  }
  bArr[5] = (byte) i;   //always 0 or 1
  short a = af.m15331a(Arrays.copyOf(bArr, 14));  //passing in only a copy?
  bArr[14] = (byte) ((a >> 8) & 255); //a is random so this value is also random
  bArr[15] = (byte) (a & 255);        //a is random so this value is also random
  m15310a(af.m15332a(str, bArr));     
}

short m15331a(byte[] bArr) {    //called by m15309a, loops through for each byte in the payload and calls m15330a, just returns a random value for a
  short a = m15330a((short) 0, bArr[0]);
  for (int i = 1; i < 14; i++) {
    a = m15330a(a, bArr[i]);
  }
  return a;
}

short m15330a(short s, byte b) {  //all it does is return a random value for s2
  short s2 = (short) ((b & 255) ^ s);
  for (int i = 0; i < 8; i++) {
    if ((s2 & 1) == 1) {
      s2 = (short) (((s2 & 65535) >>> 1) ^ 40961);
    } 
    else {
      s2 = (short) ((s2 & 65535) >>> 1);
    }
  }
  return s2;
}
  

*****************************************************************************************************************
Results

I realized that the first and fourth bytes are always set to 0x1c and 0x10 respectively. The 2nd and 3rd bytes are random. Bytes 5-20 are also random, except byte 0x09 is equal to 0x01.
Then bytes 5-20 are encrypted. The resulting combination of bytes 1-4 and 5-20 is then used to calculate bytes 21 and 22.
As long as bytes 21 and 22 are put through the correct shifting and xoring functions based off the result of the encryption, then they will be valid.
Also as long as byte 9 is still equal to 0x01 after being decrypted, then it will also be valid.

I used the BLE scanner app to do a replay attack. Since I realized that the payload is mostly random, and since there is no encryption based off of the time, I knew that I could replay the values sent for previous unlockings, which I got with a packet sniffer.
With my phone and the BLE scanner app, I was able to unlock the lock. This does not work with other phones, because my phone is already authenticated, connected, and sending the right advertisements to the app.
In order to fully hack the lock, we need to continue Gattacker and setting up the MITM attack.
If we can intercept and modify the data on the fly once a valid phone and the lock are connected, then we will we be able to unlock it. At that point, it's hacked.

  
