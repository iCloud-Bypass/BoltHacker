Preliminary Bolt research:

Sources:
  - https://mbientlab.com/tutorials/AboutWireless.html#bluetooth-protocol
  - https://help.lockitron.com/article/107-how-is-lockitron-secured
  - https://en.wikipedia.org/wiki/OAuth

Threat Model:
  - Attacker can read hashed BLE traffic
  - Attacker can modify hashed BLE traffic
  - Attacker does not know ecryption mechanism
  
How is Lockitron Secured?:
  - Application layer and Link layer encryption
  - OAuth2 regulates all apps which request access to your account

Data Link Layer:
  - where connection protocol is established
  - where we need to figure out the encryption scheme

Applicaiton Layer (OAtuh2 encryption):
  - Application that allows users to grant access to user information from one website to another website
  - OAuth allows account information from one web application to be transferred to another web application
  - Withouth the need to enter password
  - Works using the HTTP protocol
  
  - Process:
            Web app gets access token from authorization server
            Uses that token to access limited information from another site
            
  - Used by large companies
            
            
       +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+

                     Figure 1: Abstract Protocol Flow
                     
    - Authorization server is intermediary between client and resource owner
    - Authorization grant is a credential that represent the resource owner's permission
      to access protected information

Exploitation ideas:
  - Website Account Hacking
    - shown with Josh that this is not a feasible route
    
  - SMS spoofing attack
    - when signing up for account, can use fake phone number
    - can send unlock signal through spoofed SMS
    - Conclusion:
      - won't work because we would still need to give access to that fake number
    
  - Bluetooth sniffing 
    - BLE 24 hr repeat message attack:
      - We suspect that the encrypted messages are hashed with the time upon sending
      - send 2 unlock signals exactly 24 hours apart, sniff them and see if same message is sent
      - this will let us know if the algorithm hashes with just the time of day or with the date as well
      - if this is the case, we will know what value the messages are hashed and unhashed with
        
    - BLE repeater attack idea:
      - the lock has an option for you to set the lock so that it unlocks automatically whenever you are away and then return to the lock
      - if we could make the lock think that the phone is returning home, maybe we could trick the lock into opening
      - idea: establish a long range bluetooth connection between the lock and phone so that they both think that they are right next to           each other
      - how to potentially do it: set up two bridges, one near the phone, and one near the lock. Each bridge captures the bluetooth sen
        out from one of the devices, sends its as a payload over a long range http or cellular connection to the other bridge, which then         retranmits the bluetooth to the other device. Basically this is just building a giant bluetooth extender/repeater.
      - the phone thinks that its bridge is actually the lock, and the lock thinks that its bridge is actually the phone
      - these types of bridges exist but this attack would be difficult to implement.
      - reason it gets past the encryption is that we would literally take the encrypted packet sent out by the lock, and have the other           bridge send that same encrypted packet to the phone, and vice versa.
      
  - Wifi packet manipulation
    - External bridge provides entry point for exploitation (yet to test)
    - found that SMS attempts through bridge were not possible to spoof
    

Brute force login attempts:
  1. 
  
Bluetooth Low Energy (BLE)
  - Bluetooth operates on 2.4 GHz ISM band (same as WiFi)
  - unlike traditional Bluetooth, BLE remains in sleep mode until a connection is initiatied
  
  - ---------------------------------------
      Type  |      BLE      |     WiFi    |
    ---------------------------------------
    Standard| Bluetooth 4.2 |    802.11n  |
    ---------------------------------------
      Freq  | 2.4 GHz (ISM) |   2.4G/5GHz |
    ---------------------------------------
      Range |    50-150m    |      50m    |
    ---------------------------------------
    DataRate|     1Mbps     |    600Mbps  |
    ---------------------------------------
    
    â€¢ Personal Thoughts
      - if we know the frequency at which these work we can better undertand how to sniff the signals
  
  - Platform Support
    - iOS5+ (iOS7+ preferred)
    - Android 4.3+ (numerous bug fixes in 4.4+)
    - Apple OS X 10.6+
    - Windows 8 (XP, Vista and 7 only support Bluetooth 2.1)
    - GNU/Linux Vanilla BlueZ 4.93+ 
  
  - Connection
    - Bluetooh peripheral can only connect to 1 master device  
        - can have many other slave devices
  
  - GAP (Generic Access Protocol)
    - allows your device to be seen to the outside world
    - handles all connections and advertisments
      
  - Device Roles
    - Peripheral and Central devices
      - Central device has more processing power
      - Peripherals connects to central device, lower power/resource constrained
      
  - Advertising Data and Scan Response payloads
    - Both carry up to 31 bytes of data
    - only Advertising Data payload is necessary
      - peripherals contantly transmitting to central devices to let them know it exists
    - Scan Response payload
      - can be requested by central device at any point in advertising period
        - Peripheral decides length of advertising period
        
  - Broadcast Network Topology
    - When no connection is established, a peripheral can send data to many devices (only using Advertising Data payload)
    - once a connection is established between two devices, they can only talk to each other with GATT services and characteristics
    
  - GATT (Generic Attribute Protocol):
    - services and characteristics define how BLE devices talk to each other
    - stores these as 16-bit UID lookup table
    - GATT connections are exclusive between two connected devices
    - Server/Client Relationship
      - GATT Server
        - holds the ATT lookup data and service and characteristic definitions
        - slave device
      - GATT Client
        - sends requests to the server 
        - master device
        - all transactions initiatied by client
        - will suggest a connection interval, will not always be honored by server since it may be busy talking other peripherals
    - Services and Characteristics
      - Profile
        - doesn't actually exist on the peripheral
      - Service
        - used to break data up into logic entities, and contain specific chunks of data called characteristics
        - each service distinguishes itself from other services by unique 16-bit UUID
      - Characteristics
        - Lowest level concept in GATT
        - encapsulates a single data point
        - also identified by 16-bit UUID
  
  
  
       
